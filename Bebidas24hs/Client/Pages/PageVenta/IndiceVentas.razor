@page "/Ventas"
@inject IHttpService http
@inject NavigationManager navigationManager;

<h1>Ventas</h1>


<table>

    @if (ventas == null)
    {
        <tr>Cargando.....</tr>
    }
    else if (ventas.Count == 0)
    {
        <tr>No existen ventas</tr>
    }
    else
    {
        <div class="form-group">
            <div class="p-2">
                <button class="btn btn-warning" @onclick="Nuevo">Nuevo</button>
            </div>
        </div>

        <tr>
            <th class="p-3">Id</th>

            <th class="p-3">EmpleadoId</th>

        </tr>

        @foreach (var item in ventas)
        {
            <tr>
                <td class="p-3">@item.Id</td>
                <td class="p-3">@item.EmpleadoId</td>
                
                <td class="p-3">
                        <a class="btn btn-success"
                            href="VentasEditar/@item.Id"> Editar </a>
                    </td>
                <td class="p-3"><button class="btn btn-warning" @onclick="()=>Eliminar(item)">Eliminar</button></td>
            </tr>
        }
    }
</table>

<Confirmacion @ref="confirmacion"
              onConfirm="GrabarEliminar"
              onCancel="Cancelar"
              Titulo="BORRAR"
              textCancelar="Salir"
              textOk="Aceptar">
    <div>¿Desea eliminar la venta @eliminarVenta.Id?</div>
</Confirmacion>


@code {
    public List<VentaDatos> ventas { get; set; }
    //public List<Empleado> empleado = new List<Empleado>();

    public Confirmacion confirmacion { get; set; }

    public VentaDatos eliminarVenta { get; set; }


    public class VentaDatos
    { /// Borrar
        public int Id { get; set; }
        public string EmpleadoId { get; set; }
        
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Leer();
    }

    public async Task Leer()
    {    
        try
        {
            var respuestaHttp = await http.Get<List<VentaDatos>>("Api/Venta");
      
            if (!respuestaHttp.Error)
            {
                empleados = respuestaHttp.Respuesta;
            }
        }
        catch (Exception ex)
        {
            
            throw ex;
        }
    }


    private void Eliminar(VentaDatos ventaEliminar)
    {
        confirmacion.Mostrar();
        eliminarVenta = ventaEliminar;
    }


    private async Task GrabarEliminar()
    {
            var respuesta = await http.Delete($"Api/Venta/{eliminarVenta.Id}");
            if (respuesta.Error)
            {
                var body = await respuesta.GetBody();
            }
            Cancelar();
            await Leer();
    }

    private void Cancelar()
    {
            confirmacion.Ocultar();
            eliminarEmpleado = null;
    }

    private void Nuevo() {
        navigationManager.NavigateTo("/NuevoVenta");
    }

}